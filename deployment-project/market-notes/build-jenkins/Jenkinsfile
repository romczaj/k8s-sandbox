def projectHome = "/market-notes"
def appProjectHomeDir = "${projectHome}/market-notes"
def tmpBuildPath = "/home/pjoter-hp/tmp-build-market-notes/${env.BUILD_NUMBER}"
def javaHome = "/home/pjoter-hp/.sdkman/candidates/java/current"
def mavenHome = "/home/pjoter-hp/.sdkman/candidates/maven/current"
def imageRepo = "localhost:32000"
def imageName = "market-notes-v1"

def executeSSHCommand = { cmd ->
    sh "sshpass -e ssh -t -o StrictHostKeyChecking=no pjoter-hp@172.17.0.1 \"export JAVA_HOME=${javaHome}; cd ${tmpBuildPath}; ${cmd}\""
}

def copyFilesToRemote = { src, dest ->
    sh "sshpass -e scp -r -o StrictHostKeyChecking=no ${src} pjoter-hp@172.17.0.1:${dest}"
}

pipeline {
    agent any

    environment {
        SSHPASS = credentials('ssh-pass-secret-id')
    }

    stages {
        stage("Clone Git Repository") {
            steps {
                dir(projectHome) {
                    git(
                        url: "git@github.com:romczaj/market-notes.git",
                        branch: "main",
                        credentialsId: 'ajemromek-github-key-id',
                        changelog: true,
                        poll: true,
                    )
                }
            }
        }

        stage("Copy Files to Remote") {
            steps {
                script {
                    copyFilesToRemote(appProjectHomeDir, tmpBuildPath)
                }
            }
        }

        stage('Build') {
            steps {
                echo 'Building..'
                script {
                     executeSSHCommand("./mvnw clean install")
                }
            }
        }

        stage('Docker image') {
            steps {
                script {
                    echo 'Building docker image..'
                    def buildNumber = env.BUILD_NUMBER
                    executeSSHCommand("docker build -t ${imageName}:${buildNumber} .")
                    executeSSHCommand("docker tag ${imageName}:${buildNumber} ${imageRepo}/${imageName}:${buildNumber}")
                    executeSSHCommand("docker push ${imageRepo}/${imageName}:${buildNumber}")
                    echo "Image ${imageRepo}/${imageName}:${buildNumber} has been built and pushed"
                }
            }
        }
    }

   post {
       always {
           script {
               echo 'Cleaning up..'
               executeSSHCommand("rm -rf ${tmpBuildPath}")
           }
       }
   }
}